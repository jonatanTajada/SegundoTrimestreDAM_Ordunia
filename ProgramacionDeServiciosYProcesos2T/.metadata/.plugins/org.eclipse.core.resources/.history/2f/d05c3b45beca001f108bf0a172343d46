package com.chat.servidor;

import java.awt.BorderLayout;
import java.awt.Font;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

public class Servidor extends JFrame {

	private static final long serialVersionUID = -8251094502164348809L;

	private static final int PUERTO = 10101; // puerto del servidor
	private JTextArea logArea;
	private ServerSocket serverSocket;
	private boolean servidorActivo = false;

	public Servidor() {

		super("Servidor de Chat");
		inicializarVentana();
	}

	// metodo inicializar ventana
	private void inicializarVentana() {

		// configuracion de la ventana
		setSize(650, 650);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLayout(new BorderLayout(10, 10));

		// label en la parte superior
		JLabel lblTitulo = new JLabel("Log del servidor", SwingConstants.CENTER);
		lblTitulo.setFont(new Font("Arial", Font.BOLD, 16));
		add(lblTitulo, BorderLayout.NORTH);

		// area de texto para los log
		logArea = new JTextArea();
		logArea.setEditable(false);
		JScrollPane scrollPane = new JScrollPane(logArea);
		add(scrollPane, BorderLayout.CENTER);

		setVisible(true);
	}

	// metodo iniciar servidor
	public void iniciarServidor() {

		try {

			servidorActivo = true;
			serverSocket = new ServerSocket(PUERTO);
			agregarLog("Servidor iniciado en el puerto: " + PUERTO);

			while (servidorActivo) {

				agregarLog("Esperando clientes...");
				Socket clienteSocket = serverSocket.accept();

				agregarLog("Cliente conectado desde: " + clienteSocket.getInetAddress());

				// hilo independiente para manejar cliente
				Thread manejadorCliente = new Thread(new ManejadorCliente(clienteSocket));
				manejadorCliente.start();
			}
		} catch (IOException e) {

			agregarLog("Error en el servidor: " + e.getMessage());
		} finally {

			detenerServidor();
		}

	}

	// metodo detener servidor
	private void detenerServidor() {

		try {

			servidorActivo = false;

			if (serverSocket != null && !serverSocket.isClosed()) {
				
				serverSocket.close();
				agregarLog("Servidor detenido!");
			}
		} catch (IOException e) {

			agregarLog("Error al detener el servidor: " + e.getMessage());
		}
	}

	//agregar log al text area
	public void agregarLog(String mensaje) {
		
        SwingUtilities.invokeLater(() -> logArea.append(mensaje + "\n"));
    }
	
	//main
	public static void main(String[] args) {
		
	}

}
