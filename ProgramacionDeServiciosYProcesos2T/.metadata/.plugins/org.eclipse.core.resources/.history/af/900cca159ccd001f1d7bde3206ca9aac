package com.chat.cliente;

import com.chat.utilities.EstiloUI;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;

public class Cliente extends JFrame {

    private static final long serialVersionUID = 1L;
    private JTextArea areaMensajes; // Área de texto para mostrar mensajes
    private JTextField campoMensaje; // Campo de texto para escribir mensajes
    private JButton botonEnviar; // Botón para enviar mensajes
    private JComboBox<String> comboDestinatarios; // Lista de usuarios conectados
    private Socket socket; // Socket para la conexión al servidor
    private BufferedReader lector;
    private PrintWriter escritor;
    private String nombreUsuario; // Nombre del usuario

    public Cliente() {
        super("Cliente de Chat");
        inicializarVentana();
        configurarUsuario();
        conectarServidor();
    }

    private void inicializarVentana() {
        // Configuración básica de la ventana
        setSize(650, 700);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout(10, 10));

        EstiloUI.aplicarEstiloVentana(this, EstiloUI.COLOR_FONDO_CLIENTE);

        // Área de texto para mostrar mensajes
        areaMensajes = new JTextArea();
        areaMensajes.setEditable(false);
        areaMensajes.setFont(EstiloUI.FUENTE_GENERAL);
        areaMensajes.setForeground(Color.DARK_GRAY);
        areaMensajes.setBackground(Color.WHITE);
        JScrollPane scrollPane = EstiloUI.crearScrollPane(areaMensajes);
        add(scrollPane, BorderLayout.CENTER);

        // Panel inferior con el campo de texto, botón y lista de destinatarios
        JPanel panelInferior = new JPanel(new BorderLayout(5, 5));
        panelInferior.setBackground(EstiloUI.COLOR_FONDO_CLIENTE);

        campoMensaje = new JTextField();
        campoMensaje.setFont(EstiloUI.FUENTE_GENERAL);
        campoMensaje.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));

        botonEnviar = new JButton("Enviar");
        EstiloUI.aplicarEstiloBoton(botonEnviar);

        comboDestinatarios = new JComboBox<>();
        comboDestinatarios.setFont(EstiloUI.FUENTE_GENERAL);
        comboDestinatarios.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));
        comboDestinatarios.addItem("Todos"); // Opción por defecto

        panelInferior.add(comboDestinatarios, BorderLayout.WEST);
        panelInferior.add(campoMensaje, BorderLayout.CENTER);
        panelInferior.add(botonEnviar, BorderLayout.EAST);

        add(panelInferior, BorderLayout.SOUTH);

        setVisible(true);

        // Acción del botón enviar
        botonEnviar.addActionListener(e -> enviarMensaje());
    }

    private void configurarUsuario() {
        nombreUsuario = JOptionPane.showInputDialog(this, "Introduce tu nombre:", "Configuración", JOptionPane.QUESTION_MESSAGE);
        if (nombreUsuario == null || nombreUsuario.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre de usuario es obligatorio.", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }

    private void conectarServidor() {
        try {
            socket = new Socket("127.0.0.1", 10101); // Conexión al servidor
            lector = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            escritor = new PrintWriter(socket.getOutputStream(), true);

            // Enviar el nombre del usuario al servidor
            escritor.println(nombreUsuario);

            areaMensajes.append("Conectado al servidor como " + nombreUsuario + ".\n");

            // Iniciar un hilo para escuchar mensajes del servidor
            new Thread(this::escucharMensajes).start();

        } catch (IOException e) {
            mostrarError("No se pudo conectar al servidor: " + e.getMessage());
        }
    }

    private void escucharMensajes() {
        try {
            String mensaje;
            while ((mensaje = lector.readLine()) != null) {
                procesarMensaje(mensaje);
            }
        } catch (IOException e) {
            mostrarError("Conexión perdida con el servidor.");
        } finally {
            cerrarConexion();
        }
    }

    private void procesarMensaje(String mensaje) {
        if (mensaje.startsWith("Usuarios conectados:")) {
            actualizarListaUsuarios(mensaje.replace("Usuarios conectados:", "").trim());
        } else {
            SwingUtilities.invokeLater(() -> areaMensajes.append(mensaje + "\n"));
        }
    }

    private void actualizarListaUsuarios(String listaUsuarios) {
        SwingUtilities.invokeLater(() -> {
            comboDestinatarios.removeAllItems();
            comboDestinatarios.addItem("Todos"); // Opción global
            if (!listaUsuarios.isEmpty()) {
                ArrayList<String> usuarios = new ArrayList<>(Arrays.asList(listaUsuarios.split(",")));
                usuarios.stream()
                        .filter(usuario -> !usuario.equals(nombreUsuario)) // Excluir al usuario actual
                        .forEach(comboDestinatarios::addItem);
            }
        });
    }



    public synchronized void enviarMensaje(String mensaje, String remitente, String destinatario) {
        if (destinatario == null || "Global".equals(destinatario)) {
            // Mensaje global
            usuariosConectados.forEach((nombre, escritor) -> {
                if (!nombre.equals(remitente)) {
                    escritor.println(remitente + " (Global): " + mensaje);
                }
            });
            agregarLog(remitente + " envió un mensaje global: " + mensaje);
        } else {
            // Mensaje privado
            PrintWriter escritor = usuariosConectados.get(destinatario);
            if (escritor != null) {
                escritor.println(remitente + " (Privado): " + mensaje);
                agregarLog(remitente + " envió un mensaje privado a " + destinatario + ": " + mensaje);
            } else {
                agregarLog("Usuario " + destinatario + " no encontrado.");
            }
        }
    }


    private void cerrarConexion() {
        try {
            if (lector != null) lector.close();
            if (escritor != null) escritor.close();
            if (socket != null && !socket.isClosed()) socket.close();
        } catch (IOException e) {
            mostrarError("Error al cerrar la conexión: " + e.getMessage());
        }
    }

    private void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Cliente::new);
    }
}
